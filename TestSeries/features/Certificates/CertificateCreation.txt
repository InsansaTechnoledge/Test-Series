import React, { useState, useRef } from 'react';
import { Download, Upload, Palette, Type, Image, Award, Users } from 'lucide-react';

const CertificateCreation = () => {
  const [certificateType, setCertificateType] = useState('merit');
  const [recipientName, setRecipientName] = useState('John Doe');
  const [courseName, setCourseName] = useState('Web Development Course');
  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
  const [backgroundColor, setBackgroundColor] = useState('#ffffff');
  const [borderColor, setBorderColor] = useState('#d4af37');
  const [textColor, setTextColor] = useState('#333333');
  const [accentColor, setAccentColor] = useState('#1e40af');
  const [orgLogo, setOrgLogo] = useState(null);
  const [ourLogo, setOurLogo] = useState(null);
  const [draggedItem, setDraggedItem] = useState(null);
  const [elements, setElements] = useState({
    orgLogo: { x: 50, y: 50, width: 80, height: 80 },
    ourLogo: { x: 570, y: 50, width: 80, height: 80 },
    title: { x: 300, y: 120, fontSize: 32 },
    recipient: { x: 300, y: 250, fontSize: 28 },
    course: { x: 300, y: 320, fontSize: 20 },
    date: { x: 300, y: 400, fontSize: 16 }
  });

  const orgLogoRef = useRef(null);
  const ourLogoRef = useRef(null);
  const certificateRef = useRef(null);

  const handleFileUpload = (event, logoType) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (logoType === 'org') {
          setOrgLogo(e.target.result);
        } else {
          setOurLogo(e.target.result);
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const handleDragStart = (e, elementType) => {
    setDraggedItem(elementType);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e) => {
    e.preventDefault();
    if (!draggedItem) return;

    const rect = certificateRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    setElements(prev => ({
      ...prev,
      [draggedItem]: {
        ...prev[draggedItem],
        x: Math.max(0, Math.min(x - (prev[draggedItem].width || 0) / 2, rect.width - (prev[draggedItem].width || 200))),
        y: Math.max(0, Math.min(y - (prev[draggedItem].height || 20) / 2, rect.height - (prev[draggedItem].height || 20)))
      }
    }));

    setDraggedItem(null);
  };

  const downloadCertificate = () => {
    // Create canvas for download
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    canvas.width = 800;
    canvas.height = 600;

    // Draw certificate background
    ctx.fillStyle = backgroundColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw border
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = 8;
    ctx.strokeRect(20, 20, canvas.width - 40, canvas.height - 40);

    // Draw decorative corners
    ctx.fillStyle = accentColor;
    const cornerSize = 30;
    // Top corners
    ctx.fillRect(20, 20, cornerSize, cornerSize);
    ctx.fillRect(canvas.width - 50, 20, cornerSize, cornerSize);
    // Bottom corners
    ctx.fillRect(20, canvas.height - 50, cornerSize, cornerSize);
    ctx.fillRect(canvas.width - 50, canvas.height - 50, cornerSize, cornerSize);

    // Add text
    ctx.fillStyle = textColor;
    ctx.textAlign = 'center';
    
    // Title
    ctx.font = `bold ${elements.title.fontSize}px serif`;
    ctx.fillText(
      certificateType === 'merit' ? 'Certificate of Merit' : 'Certificate of Participation',
      elements.title.x,
      elements.title.y
    );

    // Recipient
    ctx.font = `bold ${elements.recipient.fontSize}px serif`;
    ctx.fillText(`Awarded to ${recipientName}`, elements.recipient.x, elements.recipient.y);

    // Course
    ctx.font = `${elements.course.fontSize}px serif`;
    ctx.fillText(
      certificateType === 'merit' 
        ? `For outstanding achievement in ${courseName}`
        : `For successful participation in ${courseName}`,
      elements.course.x,
      elements.course.y
    );

    // Date
    ctx.font = `${elements.date.fontSize}px serif`;
    ctx.fillText(`Date: ${date}`, elements.date.x, elements.date.y);

    // Download
    const link = document.createElement('a');
    link.download = `certificate-${recipientName.replace(/\s+/g, '-').toLowerCase()}.png`;
    link.href = canvas.toDataURL();
    link.click();
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8 text-center">Certificate Creator</h1>
        
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Control Panel */}
          <div className="lg:col-span-1 space-y-6">
            {/* Certificate Type */}
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="font-semibold mb-3 flex items-center gap-2">
                <Award className="w-4 h-4" />
                Certificate Type
              </h3>
              <div className="space-y-2">
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    value="merit"
                    checked={certificateType === 'merit'}
                    onChange={(e) => setCertificateType(e.target.value)}
                    className="text-blue-600"
                  />
                  <span>Merit</span>
                </label>
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    value="participation"
                    checked={certificateType === 'participation'}
                    onChange={(e) => setCertificateType(e.target.value)}
                    className="text-blue-600"
                  />
                  <span>Participation</span>
                </label>
              </div>
            </div>

            {/* Content Settings */}
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="font-semibold mb-3 flex items-center gap-2">
                <Type className="w-4 h-4" />
                Content
              </h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1">Recipient Name</label>
                  <input 
                    type="text"
                    value={recipientName}
                    onChange={(e) => setRecipientName(e.target.value)}
                    className="w-full p-2 border rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Course/Event Name</label>
                  <input
                    type="text"
                    value={courseName}
                    onChange={(e) => setCourseName(e.target.value)}
                    className="w-full p-2 border rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Date</label>
                  <input
                    type="date"
                    value={date}
                    onChange={(e) => setDate(e.target.value)}
                    className="w-full p-2 border rounded-md"
                  />
                </div>
              </div>
            </div>

            {/* Color Settings */}
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="font-semibold mb-3 flex items-center gap-2">
                <Palette className="w-4 h-4" />
                Colors
              </h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1">Background</label>
                  <input
                    type="color"
                    value={backgroundColor}
                    onChange={(e) => setBackgroundColor(e.target.value)}
                    className="w-full h-10 border rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Border</label>
                  <input
                    type="color"
                    value={borderColor}
                    onChange={(e) => setBorderColor(e.target.value)}
                    className="w-full h-10 border rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Text</label>
                  <input
                    type="color"
                    value={textColor}
                    onChange={(e) => setTextColor(e.target.value)}
                    className="w-full h-10 border rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Accent</label>
                  <input
                    type="color"
                    value={accentColor}
                    onChange={(e) => setAccentColor(e.target.value)}
                    className="w-full h-10 border rounded-md"
                  />
                </div>
              </div>
            </div>

            {/* Logo Upload */}
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="font-semibold mb-3 flex items-center gap-2">
                <Image className="w-4 h-4" />
                Logos
              </h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1">Organization Logo</label>
                  <input
                    ref={orgLogoRef}
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleFileUpload(e, 'org')}
                    className="w-full p-2 border rounded-md text-sm"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Our Logo</label>
                  <input
                    ref={ourLogoRef}
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleFileUpload(e, 'our')}
                    className="w-full p-2 border rounded-md text-sm"
                  />
                </div>
              </div>
            </div>

            {/* Download Button */}
            <button
              onClick={downloadCertificate}
              className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
            >
              <Download className="w-4 h-4" />
              Download Certificate
            </button>
          </div>

          {/* Certificate Preview */}
          <div className="lg:col-span-3">
            <div className="bg-white p-6 rounded-lg shadow-sm border">
              <h3 className="font-semibold mb-4">Certificate Preview</h3>
              <p className="text-sm text-gray-600 mb-4">Drag elements to reposition them on the certificate</p>
              
              <div className="flex justify-center">
                <div
                  ref={certificateRef}
                  className="relative border-2 border-gray-300 cursor-move"
                  style={{
                    width: '800px',
                    height: '600px',
                    backgroundColor: backgroundColor,
                    backgroundImage: `linear-gradient(45deg, ${backgroundColor}00 25%, ${accentColor}10 25%, ${accentColor}10 50%, ${backgroundColor}00 50%, ${backgroundColor}00 75%, ${accentColor}10 75%)`
                  }}
                  onDragOver={handleDragOver}
                  onDrop={handleDrop}
                >
                  {/* Decorative Border */}
                  <div
                    className="absolute inset-4 border-4 rounded-lg"
                    style={{ borderColor: borderColor }}
                  >
                    {/* Corner Decorations */}
                    <div className="absolute -top-2 -left-2 w-6 h-6 rotate-45" style={{ backgroundColor: accentColor }}></div>
                    <div className="absolute -top-2 -right-2 w-6 h-6 rotate-45" style={{ backgroundColor: accentColor }}></div>
                    <div className="absolute -bottom-2 -left-2 w-6 h-6 rotate-45" style={{ backgroundColor: accentColor }}></div>
                    <div className="absolute -bottom-2 -right-2 w-6 h-6 rotate-45" style={{ backgroundColor: accentColor }}></div>
                  </div>

                  {/* Organization Logo */}
                  {orgLogo && (
                    <img
                      src={orgLogo}
                      alt="Organization Logo"
                      draggable
                      onDragStart={(e) => handleDragStart(e, 'orgLogo')}
                      className="absolute cursor-move hover:opacity-80 border-2 border-dashed border-transparent hover:border-blue-400"
                      style={{
                        left: elements.orgLogo.x,
                        top: elements.orgLogo.y,
                        width: elements.orgLogo.width,
                        height: elements.orgLogo.height,
                        objectFit: 'contain'
                      }}
                    />
                  )}

                  {/* Our Logo */}
                  {ourLogo && (
                    <img
                      src={ourLogo}
                      alt="Our Logo"
                      draggable
                      onDragStart={(e) => handleDragStart(e, 'ourLogo')}
                      className="absolute cursor-move hover:opacity-80 border-2 border-dashed border-transparent hover:border-blue-400"
                      style={{
                        left: elements.ourLogo.x,
                        top: elements.ourLogo.y,
                        width: elements.ourLogo.width,
                        height: elements.ourLogo.height,
                        objectFit: 'contain'
                      }}
                    />
                  )}

                  {/* Certificate Title */}
                  <div
                    draggable
                    onDragStart={(e) => handleDragStart(e, 'title')}
                    className="absolute cursor-move hover:bg-blue-50 hover:bg-opacity-50 p-2 rounded border-2 border-dashed border-transparent hover:border-blue-400"
                    style={{
                      left: elements.title.x - 200,
                      top: elements.title.y - 20,
                      width: '400px',
                      textAlign: 'center',
                      fontSize: elements.title.fontSize,
                      fontWeight: 'bold',
                      color: textColor,
                      fontFamily: 'serif'
                    }}
                  >
                    {certificateType === 'merit' ? 'Certificate of Merit' : 'Certificate of Participation'}
                  </div>

                  {/* Recipient Name */}
                  <div
                    draggable
                    onDragStart={(e) => handleDragStart(e, 'recipient')}
                    className="absolute cursor-move hover:bg-blue-50 hover:bg-opacity-50 p-2 rounded border-2 border-dashed border-transparent hover:border-blue-400"
                    style={{
                      left: elements.recipient.x - 200,
                      top: elements.recipient.y - 15,
                      width: '400px',
                      textAlign: 'center',
                      fontSize: elements.recipient.fontSize,
                      fontWeight: 'bold',
                      color: textColor,
                      fontFamily: 'serif'
                    }}
                  >
                    Awarded to {recipientName}
                  </div>

                  {/* Course/Event Description */}
                  <div
                    draggable
                    onDragStart={(e) => handleDragStart(e, 'course')}
                    className="absolute cursor-move hover:bg-blue-50 hover:bg-opacity-50 p-2 rounded border-2 border-dashed border-transparent hover:border-blue-400"
                    style={{
                      left: elements.course.x - 250,
                      top: elements.course.y - 10,
                      width: '500px',
                      textAlign: 'center',
                      fontSize: elements.course.fontSize,
                      color: textColor,
                      fontFamily: 'serif'
                    }}
                  >
                    {certificateType === 'merit' 
                      ? `For outstanding achievement in ${courseName}`
                      : `For successful participation in ${courseName}`
                    }
                  </div>

                  {/* Date */}
                  <div
                    draggable
                    onDragStart={(e) => handleDragStart(e, 'date')}
                    className="absolute cursor-move hover:bg-blue-50 hover:bg-opacity-50 p-2 rounded border-2 border-dashed border-transparent hover:border-blue-400"
                    style={{
                      left: elements.date.x - 100,
                      top: elements.date.y - 8,
                      width: '200px',
                      textAlign: 'center',
                      fontSize: elements.date.fontSize,
                      color: textColor,
                      fontFamily: 'serif'
                    }}
                  >
                    Date: {date}
                  </div>

                  {/* Decorative Elements */}
                  <div className="absolute bottom-20 left-1/2 transform -translate-x-1/2">
                    <div className="flex items-center space-x-4">
                      <div className="w-32 h-px" style={{ backgroundColor: borderColor }}></div>
                      <div className="w-8 h-8 rounded-full flex items-center justify-center" style={{ backgroundColor: accentColor }}>
                        {certificateType === 'merit' ? (
                          <Award className="w-4 h-4 text-white" />
                        ) : (
                          <Users className="w-4 h-4 text-white" />
                        )}
                      </div>
                      <div className="w-32 h-px" style={{ backgroundColor: borderColor }}></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CertificateCreation;