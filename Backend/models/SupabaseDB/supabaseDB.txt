create table public.Batch_syllabus (
  id uuid primary key default gen_random_uuid(),
  syllabus jsonb not null,
  created_at timestamp with time zone default now()
);

  create table public.Organization_Batch (
    id uuid primary key default gen_random_uuid(),
    organization_id text not null,
    name text not null,
    year int2 not null,
    syllabus_id uuid references public.Batch_syllabus(id),
    created_at timestamp with time zone default now()
  );

create table public.Batch_exam (
  id uuid primary key default gen_random_uuid(),

  name text not null,
  date date not null,

  batch_id uuid references public.Organization_Batch(id) on delete cascade,
  organization_id text not null, -- from MongoDB

  total_marks int2,
  duration int2, -- in minutes
  live_until timestamp with time zone,

  description text,
  guidelines text,

  status text check (
    status in ('scheduled', 'live', 'ended')
  ) default 'scheduled',

  syllabus jsonb, -- subject: [chapters]

  created_at timestamp with time zone default now()
);

create table public.questions (
  id uuid primary key default gen_random_uuid(),
  exam_id uuid references Batch_exam(id) on delete cascade,
  organization_id text not null, -- from MongoDB

  subject text,
  chapter text,
  question_type text check (
    question_type in ('mcq', 'msq', 'fill', 'tf', 'match', 'comprehension', 'numerical', 'code')
  ) not null,

  difficulty text check (
    difficulty in ('easy', 'medium', 'hard')
  ),

  explanation text,
  marks int2 default 1,

  created_at timestamp with time zone default now()
);

create table public.question_mcq (
  id uuid primary key references questions(id) on delete cascade,
  question_text text not null,
  options text[] not null,
  correct_option int2 not null
);

create table public.question_msq (
  id uuid primary key references questions(id) on delete cascade,
  question_text text not null,
  options text[] not null,
  correct_options int2[] not null
);

create table public.question_fill (
  id uuid primary key references questions(id) on delete cascade,
  question_text text not null,
  correct_answer text not null
);

create table public.question_tf (
  id uuid primary key references questions(id) on delete cascade,
  statement text not null,
  is_true boolean not null
);

create table public.question_match (
  id uuid primary key references questions(id) on delete cascade,
  left_items text[] not null,
  right_items text[] not null,
  correct_pairs jsonb not null -- e.g., {"1":"C", "2":"A"}
);

create table public.question_comprehension (
  id uuid primary key references questions(id) on delete cascade,
  passage text not null,
  sub_question_ids uuid[] -- Optional for linking other questions
);

create table public.question_numerical (
  id uuid primary key references questions(id) on delete cascade,
  question_text text not null,
  correct_answer numeric
);

create table public.question_code (
  id uuid primary key references questions(id) on delete cascade,
  prompt text not null,
  input_format text,
  output_format text,
  sample_input text,
  sample_output text,
  test_cases jsonb -- e.g., [{input: "2 3", output: "5"}]
);


-- Optimized PostgreSQL RPC function to replicate fetchQuestionsSelectively behavior
CREATE OR REPLACE FUNCTION fetch_questions_selectively(
    p_exam_id UUID DEFAULT NULL,
    p_organization_id TEXT DEFAULT NULL,
    p_subject TEXT DEFAULT NULL,
    p_chapter TEXT DEFAULT NULL,
    p_question_type TEXT DEFAULT NULL,
    p_difficulty TEXT DEFAULT NULL,
   p_already_given_exam NULL
) 
RETURNS JSONB
LANGUAGE plpgsql
AS $$
DECLARE
    result JSONB := '[]'::JSONB;
    question_record RECORD;
    specialized_data JSONB;
    sub_questions_data JSONB := '[]'::JSONB;
    sub_question_record RECORD;
    sub_specialized_data JSONB;
    all_comprehension_sub_ids UUID[] := ARRAY[]::UUID[];
    sub_q_id UUID;
BEGIN

  IF p_exam_id IS NOT NULL AND p_already_given IS TRUE THEN
    -- Student has already attempted the exam, check if it's reapplicable
    PERFORM 1
    FROM batch_exam 
    WHERE id = p_exam_id AND reapplicable IS TRUE;

    IF NOT FOUND THEN 
        RETURN '[]'::JSONB;  -- Not allowed to reattempt, so return nothing
    END IF;
  END IF;
    -- First pass: collect all comprehension sub-question IDs
    FOR question_record IN 
        SELECT q.*, qc.sub_question_ids
        FROM questions q
        LEFT JOIN question_comprehension qc ON q.id = qc.id AND q.question_type = 'comprehension'
        WHERE 
            (p_exam_id IS NULL OR q.exam_id = p_exam_id)
            AND (p_organization_id IS NULL OR p_organization_id = '' OR q.organization_id = p_organization_id)
            AND (p_subject IS NULL OR p_subject = '' OR q.subject = p_subject)
            AND (p_chapter IS NULL OR p_chapter = '' OR q.chapter = p_chapter)
            AND (p_question_type IS NULL OR p_question_type = '' OR q.question_type = p_question_type)
            AND (p_difficulty IS NULL OR p_difficulty = '' OR q.difficulty = p_difficulty)
    LOOP
        IF question_record.question_type = 'comprehension' AND question_record.sub_question_ids IS NOT NULL THEN
            all_comprehension_sub_ids := all_comprehension_sub_ids || question_record.sub_question_ids;
        END IF;
    END LOOP;

    -- Second pass: build enriched questions
    FOR question_record IN 
        SELECT q.*
        FROM questions q
        WHERE 
            (p_exam_id IS NULL OR q.exam_id = p_exam_id)
            AND (p_organization_id IS NULL OR p_organization_id = '' OR q.organization_id = p_organization_id)
            AND (p_subject IS NULL OR p_subject = '' OR q.subject = p_subject)
            AND (p_chapter IS NULL OR p_chapter = '' OR q.chapter = p_chapter)
            AND (p_question_type IS NULL OR p_question_type = '' OR q.question_type = p_question_type)
            AND (p_difficulty IS NULL OR p_difficulty = '' OR q.difficulty = p_difficulty)
            -- Filter out comprehension sub-questions
            AND NOT (q.id = ANY(all_comprehension_sub_ids))
    LOOP
        -- Get specialized data based on question type
        specialized_data := '{}'::JSONB;
        
        CASE question_record.question_type
            WHEN 'mcq' THEN
                SELECT to_jsonb(mcq.*) INTO specialized_data 
                FROM question_mcq mcq WHERE mcq.id = question_record.id;
                
            WHEN 'msq' THEN
                SELECT to_jsonb(msq.*) INTO specialized_data 
                FROM question_msq msq WHERE msq.id = question_record.id;
                
            WHEN 'fill' THEN
                SELECT to_jsonb(fill.*) INTO specialized_data 
                FROM question_fill fill WHERE fill.id = question_record.id;
                
            WHEN 'tf' THEN
                SELECT to_jsonb(tf.*) INTO specialized_data 
                FROM question_tf tf WHERE tf.id = question_record.id;
                
            WHEN 'match' THEN
                SELECT to_jsonb(match.*) INTO specialized_data 
                FROM question_match match WHERE match.id = question_record.id;
                
            WHEN 'numerical' THEN
                SELECT to_jsonb(num.*) INTO specialized_data 
                FROM question_numerical num WHERE num.id = question_record.id;
                
            WHEN 'code' THEN
                SELECT to_jsonb(code.*) INTO specialized_data 
                FROM question_code code WHERE code.id = question_record.id;
                
            WHEN 'comprehension' THEN
                SELECT to_jsonb(comp.*) INTO specialized_data 
                FROM question_comprehension comp WHERE comp.id = question_record.id;
                
                -- Handle sub-questions for comprehension
                sub_questions_data := '[]'::JSONB;
                
                IF (specialized_data->'sub_question_ids') IS NOT NULL AND jsonb_array_length(specialized_data->'sub_question_ids') > 0 THEN
                    FOR sub_q_id IN SELECT (jsonb_array_elements_text(specialized_data->'sub_question_ids'))::UUID
                    LOOP
                        -- Get sub-question base data
                        SELECT * INTO sub_question_record 
                        FROM questions WHERE id = sub_q_id;
                        
                        IF sub_question_record IS NOT NULL THEN
                            -- Get sub-question specialized data
                            sub_specialized_data := '{}'::JSONB;
                            
                            CASE sub_question_record.question_type
                                WHEN 'mcq' THEN
                                    SELECT to_jsonb(mcq.*) INTO sub_specialized_data 
                                    FROM question_mcq mcq WHERE mcq.id = sub_q_id;
                                WHEN 'msq' THEN
                                    SELECT to_jsonb(msq.*) INTO sub_specialized_data 
                                    FROM question_msq msq WHERE msq.id = sub_q_id;
                                WHEN 'fill' THEN
                                    SELECT to_jsonb(fill.*) INTO sub_specialized_data 
                                    FROM question_fill fill WHERE fill.id = sub_q_id;
                                WHEN 'tf' THEN
                                    SELECT to_jsonb(tf.*) INTO sub_specialized_data 
                                    FROM question_tf tf WHERE tf.id = sub_q_id;
                                WHEN 'numerical' THEN
                                    SELECT to_jsonb(num.*) INTO sub_specialized_data 
                                    FROM question_numerical num WHERE num.id = sub_q_id;
                                ELSE
                                    sub_specialized_data := '{}'::JSONB;
                            END CASE;
                            
                            -- Merge sub-question data
                            sub_questions_data := sub_questions_data || 
                                jsonb_build_array(to_jsonb(sub_question_record) || COALESCE(sub_specialized_data, '{}'::JSONB));
                        END IF;
                    END LOOP;
                END IF;
                
                -- Add sub_questions to specialized_data
                specialized_data := specialized_data || jsonb_build_object('sub_questions', sub_questions_data);
        END CASE;
        
        -- Merge question data with specialized data
        result := result || jsonb_build_array(
            to_jsonb(question_record) || COALESCE(specialized_data, '{}'::JSONB)
        );
        
    END LOOP;

    RETURN result;
END;
$$;


  CREATE OR REPLACE FUNCTION create_contest_with_batches(
 p_selected_batches UUID[],
  p_organization_id TEXT,
  p_name TEXT, 
  p_type TEXT,
  p_duration SMALLINT,
  p_created_at TIMESTAMPTZ,
  p_updated_at TIMESTAMPTZ,
  p_schedule TIMESTAMPTZ DEFAULT NULL,
  p_live_until TIMESTAMPTZ DEFAULT NULL,
  p_go_live BOOLEAN DEFAULT FALSE,
  p_description TEXT DEFAULT NULL,
  p_validity JSONB DEFAULT '{}'::jsonb
)
RETURNS TABLE (
    id UUID,
    name TEXT,
    organization_id TEXT,
    type TEXT,
    schedule TIMESTAMPTZ,
    duration smallint,
    live_until TIMESTAMPTZ,
    go_live boolean,
    created_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ,
    description TEXT,
    validity jsonb
)
LANGUAGE plpgsql
AS $$
DECLARE
    new_contest_id UUID := gen_random_uuid();
    batch_id UUID;
BEGIN
    -- Insert the contest
    INSERT INTO organization_contest (
        id, organization_id,name,type,schedule,duration,live_until,go_live,created_at,updated_at,description,validity
    )
    VALUES (
        new_contest_id,p_organization_id,p_name,p_type,p_schedule,p_duration,p_live_until,p_go_live,p_created_at,p_updated_at,p_description,p_validity
    );

    -- Insert into contest_batch table for each batch
   FOREACH batch_id IN ARRAY p_selected_batches
LOOP
    INSERT INTO batchxcontest (batch_id, contest_id)
    VALUES (batch_id, new_contest_id);
END LOOP;

    -- Return the inserted contest
    RETURN QUERY
SELECT 
  oc.id,
  oc.name,
  oc.organization_id,
  oc.type,
  oc.schedule,
  oc.duration,
  oc.live_until,
  oc.go_live,
  oc.created_at,
  oc.updated_at,
  oc.description,
  oc.validity
FROM organization_contest oc
WHERE oc.id = new_contest_id;

    
END;
$$;